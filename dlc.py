import deeplabcut
import math
import cv2
import os
import pandas as pd
import glob

# Camera params
depth = 50  # Example depth in cm
fov_h = 60  # Example horizontal field of view in degrees
fov_v = 40  # Example vertical field of view in degrees
sensor_width = 6.3  # Example sensor width in mm
sensor_height = 4.7  # Example sensor height in mm
image_width = 1280  # Example image width in pixels
image_height = 720  # Example image height in pixels


# Root path
root = "/home/ubuntu/repos/stereo-cam-backend/"

# Config and results paths
config_path = root + "fish-jfaller-2025-03-27/config.yaml"
image_folder = root + "static/uploaded_images"


def clean_image_folder():
    file_types_to_delete = ["*.csv", "*.h5", "*.pickle", "*.png", "*.jpg"]
    for file_type in file_types_to_delete:
        for file in glob.glob(os.path.join(image_folder, file_type)):
            os.remove(file)


def compute_points_from_image():

    # Saves as csv
    deeplabcut.analyze_time_lapse_frames(
        config_path,
        image_folder,
        frametype=".jpg",
        save_as_csv=True,
    )
    # List all CSV files in the image_folder
    csv_fn = glob.glob(os.path.join(image_folder, "*.csv"))
    if not csv_fn:
        raise FileNotFoundError("No CSV file generated by DeepLabCut.")
    csv_file_path = csv_fn[0]
    print(f"Found CSV files: {csv_fn}")

    print(f"Reading CSV from: {csv_file_path}")
    df = pd.read_csv(csv_file_path)
    print(f"CSV loaded, shape: {df.shape}")
    print(f"CSV headers: {df.columns}")
    print(f"First few rows: {df.head()}")
    clean_image_folder()
    data_start_row = 2
    try:
        snout_x = float(df.iloc[data_start_row, 1])
        snout_y = float(df.iloc[data_start_row, 2])
        tail_fin_x = float(df.iloc[data_start_row, 4])
        tail_fin_y = float(df.iloc[data_start_row, 5])
        top_x = float(df.iloc[data_start_row, 7])
        top_y = float(df.iloc[data_start_row, 8])
        bottom_x = float(df.iloc[data_start_row, 10])
        bottom_y = float(df.iloc[data_start_row, 11])
    except Exception as e:
        print(
            f"Error at row {data_start_row}, column indexes available: 0-{df.shape[1]-1}"
        )
        raise RuntimeError(f"Error parsing CSV: {e}")
    list_of_points = [
        (snout_x, snout_y),
        (tail_fin_x, tail_fin_y),
        (top_x, top_y),
        (bottom_x, bottom_y),
    ]
    length_cm, width_cm, _, _ = calc_dimensions(
        snout_x, snout_y, tail_fin_x, tail_fin_y, top_x, top_y, bottom_x, bottom_y
    )
    print("List of points: ", list_of_points)

    return list_of_points, [(length_cm, width_cm)]


def calc_dimensions(
    snout_x, snout_y, tail_fin_x, tail_fin_y, top_x, top_y, bottom_x, bottom_y
):
    # Calculate real-world width and height at the given depth
    real_width = 2 * depth * math.tan(math.radians(fov_h / 2))
    real_height = 2 * depth * math.tan(math.radians(fov_v / 2))

    # Calculate pixel to real-world conversion factors
    x_conversion_factor = real_width / image_width
    y_conversion_factor = real_height / image_height

    # Calculate length in pixels
    length_pixels = math.sqrt((tail_fin_x - snout_x) ** 2 + (tail_fin_y - snout_y) ** 2)
    # Convert length to real-world units
    length_cm = length_pixels * x_conversion_factor
    length_in = length_cm / 2.54

    # Calculate width in pixels
    width_pixels = math.sqrt((bottom_x - top_x) ** 2 + (bottom_y - top_y) ** 2)
    # Convert width to real-world units
    width_cm = width_pixels * y_conversion_factor
    width_in = width_cm / 2.54

    return length_cm, length_in, width_cm, width_in
